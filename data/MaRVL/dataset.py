# generate dataset from the caption generated by the model and the original json file

import json
import pandas as pd


class MaRVL_Dataset_Generator:
    def __init__(self, frame, language):
        self.frame = frame
        self.lang = language

        # create frame template
        template1 = "<{}> <{}>"
        template2 = "Left: {}. Right: {}."
        template3 = "There are {} in the left image and {} in the right image."
        template4 = "Left: <{}>. Right: <{}>."
        template5 = "The left image shows {} while the right image shows {}."

        jsonl_file_path = f"data/MaRVL/{self.lang}/test.json"

        ids = []
        labels = []
        left_images = []
        right_images = []
        captions = []

        # open the JSONL file and read each line
        with open(jsonl_file_path, "r") as f:
            for line in f:
                data = json.loads(line)
                ids.append(data["id"])
                labels.append(data["label"])
                left_images.append(data["left_img"])
                right_images.append(data["right_img"])
                captions.append(data["caption"])

        data = {
            "id": ids,
            "label": labels,
            "left_img": left_images,
            "right_img": right_images,
            "caption": captions,
        }

        df = pd.DataFrame(data)

        generated_captions = pd.read_csv(
            f"data/MaRVL/{self.lang}/caption.csv", sep=",", header=0
        )
        generated_captions.columns = ["left_img", "left_caption"]

        df = pd.merge(df, generated_captions, on="left_img")

        # check if all the left images have captions
        for i in df.index:
            if df.loc[i, "left_caption"] == "None":
                print("left image {} does not have a caption".format(i))

        generated_captions.columns = ["right_img", "right_caption"]

        df = pd.merge(df, generated_captions, on="right_img")

        # check if all the right images have captions
        for i in df.index:
            if df.loc[i, "right_caption"] == "None":
                print("right image {} does not have a caption".format(i))

        # frame map
        if self.frame == 1:
            df["generated_caption"] = df.apply(lambda row : template1.format(row["left_caption"], row["right_caption"]), axis=1)
        elif self.frame == 2:
            df["generated_caption"] = df.apply(lambda row : template2.format(row["left_caption"], row["right_caption"]), axis=1)    
        elif self.frame == 3:
            df["generated_caption"] = df.apply(lambda row : template3.format(row["left_caption"], row["right_caption"]), axis=1)
        elif self.frame == 4:
            df["generated_caption"] = df.apply(lambda row : template4.format(row["left_caption"], row["right_caption"]), axis=1)
        elif self.frame == 5:
            df["generated_caption"] = df.apply(lambda row : template5.format(row["left_caption"], row["right_caption"]), axis=1)
        else:
            df["generated_caption"] = df["left_caption"] + " " + df["right_caption"]

        # only keep the columns we need
        df = df[["id", "label", "generated_caption", "caption"]]
        df.columns = ["id", "label", "generated_caption", "original_caption"]
        
        # save the data as a csv file
        df.to_csv(
            f"data/MaRVL/{self.lang}/test.csv", sep=";", header=True, index=False
        )
        print("dataset generated for {} language with frame {}".format(self.lang, self.frame))

